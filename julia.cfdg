N = 40
S = 20

startshape grid [b 1 sat 1]

shape grid {
  loop re = (-1.9, 0.69, 2.6/N) [x S]
    loop im = (-1.3, 1.29, 2.6/N) [y S]
      julia ((re,im)) []
}

shape julia (vector2 c) {
  loop re = (-1.5, 1.5, 3/S) [x 1]
    loop im = (-1.5, 1.5, 3/S) [y 1]
      pixel(re, im, c) []
}

shape pixel(number real, number imaginary, vector2 c) {
  i = iterations(real, imaginary, c, 0)
  SQUARE [hue mod(i, 360) b -floor(i/360)]
}

iterations(real, imaginary, vector2 c, depth) = let (
  next_real = real^2 - imaginary^2 + c[0];
  next_imaginary = 2*real*imaginary + c[1];
  if (depth >= 360, 360,
    if (next_real^2 + next_imaginary^2 > 4, depth+1,
      iterations(next_real, next_imaginary, c, depth+1))))

